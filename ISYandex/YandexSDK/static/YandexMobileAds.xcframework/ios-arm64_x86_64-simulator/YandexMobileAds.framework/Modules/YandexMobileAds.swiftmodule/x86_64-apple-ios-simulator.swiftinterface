// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YandexMobileAds
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreLocation
import Foundation
import Swift
import UIKit
@_exported import YandexMobileAds
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAdInfo) @objcMembers public class AdInfo : ObjectiveC.NSObject {
  @objc public var adUnitId: Swift.String {
    @objc get
  }
  @objc public var adSize: YandexMobileAds.AdSize? {
    @objc get
  }
  @objc(initWithAdUnitId:adSize:) convenience public init(adUnitId: Swift.String, adSize: YandexMobileAds.AdSize?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAdRequestError) @objcMembers public class AdRequestError : ObjectiveC.NSObject {
  @objc public var adUnitId: Swift.String? {
    @objc get
  }
  @objc public var error: any Swift.Error {
    @objc get
  }
  @objc(initWithAdUnitId:error:) convenience public init(adUnitId: Swift.String?, error: any Swift.Error)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAdSize) @objcMembers public class AdSize : ObjectiveC.NSObject {
  @objc public var width: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc(initWithSize:) convenience public init(size: CoreFoundation.CGSize)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAAdView) @objcMembers @_Concurrency.MainActor(unsafe) public class AdView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var adUnitID: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var videoController: YandexMobileAds.VideoController {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any YandexMobileAds.AdViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public init(adUnitID: Swift.String, adSize: YandexMobileAds.BannerAdSize)
  @objc(displayAtTopInView:) @_Concurrency.MainActor(unsafe) public func displayAtTop(in view: UIKit.UIView)
  @objc(displayAtBottomInView:) @_Concurrency.MainActor(unsafe) public func displayAtBottom(in view: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public func loadAd()
  @objc(loadAdWithRequest:) @_Concurrency.MainActor(unsafe) public func loadAd(with request: YandexMobileAds.AdRequest?)
  @objc @_Concurrency.MainActor(unsafe) public func adContentSize() -> CoreFoundation.CGSize
  @objc deinit
}
extension YandexMobileAds.AdView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
}
@objc(YMAAdViewDelegate) public protocol AdViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func viewControllerForPresentingModalView() -> UIKit.UIViewController?
  @objc optional func adViewDidLoad(_ adView: YandexMobileAds.AdView)
  @objc optional func adViewDidFailLoading(_ adView: YandexMobileAds.AdView, error: any Swift.Error)
  @objc optional func adViewDidClick(_ adView: YandexMobileAds.AdView)
  @objc optional func adViewWillLeaveApplication(_ adView: YandexMobileAds.AdView)
  @objc optional func adView(_ adView: YandexMobileAds.AdView, willPresentScreen viewController: UIKit.UIViewController?)
  @objc optional func adView(_ adView: YandexMobileAds.AdView, didDismissScreen viewController: UIKit.UIViewController?)
  @objc(adView:didTrackImpressionWithData:) optional func adView(_ adView: YandexMobileAds.AdView, didTrackImpression impressionData: (any YandexMobileAds.ImpressionData)?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAppOpenAd) @objcMembers public class AppOpenAd : ObjectiveC.NSObject {
  @objc public var adInfo: YandexMobileAds.AdInfo? {
    @objc get
  }
  @objc weak public var delegate: (any YandexMobileAds.AppOpenAdDelegate)? {
    @objc get
    @objc set
  }
  @objc(showFromViewController:) public func show(from viewController: UIKit.UIViewController)
  @objc deinit
}
@objc(YMAAppOpenAdDelegate) public protocol AppOpenAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func appOpenAd(_ appOpenAd: YandexMobileAds.AppOpenAd, didFailToShowWithError error: any Swift.Error)
  @objc optional func appOpenAdDidShow(_ appOpenAd: YandexMobileAds.AppOpenAd)
  @objc optional func appOpenAdDidDismiss(_ appOpenAd: YandexMobileAds.AppOpenAd)
  @objc optional func appOpenAdDidClick(_ appOpenAd: YandexMobileAds.AppOpenAd)
  @objc(appOpenAd:didTrackImpressionWithData:) optional func appOpenAd(_ appOpenAd: YandexMobileAds.AppOpenAd, didTrackImpressionWith impressionData: (any YandexMobileAds.ImpressionData)?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAppOpenAdLoader) @objcMembers public class AppOpenAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.AppOpenAdLoaderDelegate)? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc public func loadAd(with request: YandexMobileAds.AdRequestConfiguration)
  @objc public func cancelLoading()
  @objc deinit
}
@objc(YMAAppOpenAdLoaderDelegate) public protocol AppOpenAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc func appOpenAdLoader(_ adLoader: YandexMobileAds.AppOpenAdLoader, didLoad appOpenAd: YandexMobileAds.AppOpenAd)
  @objc func appOpenAdLoader(_ adLoader: YandexMobileAds.AppOpenAdLoader, didFailToLoadWithError error: YandexMobileAds.AdRequestError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMABannerAdSize) public class BannerAdSize : ObjectiveC.NSObject {
  @objc public var size: CoreFoundation.CGSize {
    @objc get
  }
  @objc(fixedSizeWithWidth:height:) public static func fixedSize(withWidth width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> YandexMobileAds.BannerAdSize
  @objc(inlineSizeWithWidth:maxHeight:) public static func inlineSize(withWidth width: CoreFoundation.CGFloat, maxHeight height: CoreFoundation.CGFloat) -> YandexMobileAds.BannerAdSize
  @objc(stickySizeWithContainerWidth:) public static func stickySize(withContainerWidth width: CoreFoundation.CGFloat) -> YandexMobileAds.BannerAdSize
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAInterstitialAd) @objcMembers public class InterstitialAd : ObjectiveC.NSObject {
  @objc public var adInfo: YandexMobileAds.AdInfo? {
    @objc get
  }
  @objc weak public var delegate: (any YandexMobileAds.InterstitialAdDelegate)? {
    @objc get
    @objc set
  }
  @objc(showFromViewController:) public func show(from viewController: UIKit.UIViewController)
  @objc deinit
}
@objc(YMAInterstitialAdDelegate) public protocol InterstitialAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func interstitialAd(_ interstitialAd: YandexMobileAds.InterstitialAd, didFailToShowWithError error: any Swift.Error)
  @objc optional func interstitialAdDidShow(_ interstitialAd: YandexMobileAds.InterstitialAd)
  @objc optional func interstitialAdDidDismiss(_ interstitialAd: YandexMobileAds.InterstitialAd)
  @objc optional func interstitialAdDidClick(_ interstitialAd: YandexMobileAds.InterstitialAd)
  @objc(interstitialAd:didTrackImpressionWithData:) optional func interstitialAd(_ interstitialAd: YandexMobileAds.InterstitialAd, didTrackImpressionWith impressionData: (any YandexMobileAds.ImpressionData)?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAInterstitialAdLoader) @objcMembers public class InterstitialAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.InterstitialAdLoaderDelegate)? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc(loadAdWithRequestConfiguration:) public func loadAd(with request: YandexMobileAds.AdRequestConfiguration)
  @objc public func cancelLoading()
  @objc deinit
}
@objc(YMAInterstitialAdLoaderDelegate) public protocol InterstitialAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc func interstitialAdLoader(_ adLoader: YandexMobileAds.InterstitialAdLoader, didLoad interstitialAd: YandexMobileAds.InterstitialAd)
  @objc func interstitialAdLoader(_ adLoader: YandexMobileAds.InterstitialAdLoader, didFailToLoadWithError error: YandexMobileAds.AdRequestError)
}
@objc(YMAReward) public protocol Reward : ObjectiveC.NSObjectProtocol {
  @objc var amount: Swift.Int { get }
  @objc var type: Swift.String { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMARewardedAd) @objcMembers public class RewardedAd : ObjectiveC.NSObject {
  @objc public var adInfo: YandexMobileAds.AdInfo? {
    @objc get
  }
  @objc weak public var delegate: (any YandexMobileAds.RewardedAdDelegate)? {
    @objc get
    @objc set
  }
  @objc(showFromViewController:) public func show(from viewController: UIKit.UIViewController)
  @objc deinit
}
@objc(YMARewardedAdDelegate) public protocol RewardedAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func rewardedAd(_ rewardedAd: YandexMobileAds.RewardedAd, didReward reward: any YandexMobileAds.Reward)
  @objc optional func rewardedAd(_ rewardedAd: YandexMobileAds.RewardedAd, didFailToShowWithError error: any Swift.Error)
  @objc optional func rewardedAdDidShow(_ rewardedAd: YandexMobileAds.RewardedAd)
  @objc optional func rewardedAdDidDismiss(_ rewardedAd: YandexMobileAds.RewardedAd)
  @objc optional func rewardedAdDidClick(_ rewardedAd: YandexMobileAds.RewardedAd)
  @objc optional func rewardedAd(_ rewardedAd: YandexMobileAds.RewardedAd, didTrackImpressionWith impressionData: (any YandexMobileAds.ImpressionData)?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMARewardedAdLoader) @objcMembers public class RewardedAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.RewardedAdLoaderDelegate)? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc(loadAdWithRequestConfiguration:) public func loadAd(with request: YandexMobileAds.AdRequestConfiguration)
  @objc public func cancelLoading()
  @objc deinit
}
@objc(YMARewardedAdLoaderDelegate) public protocol RewardedAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc func rewardedAdLoader(_ adLoader: YandexMobileAds.RewardedAdLoader, didLoad rewardedAd: YandexMobileAds.RewardedAd)
  @objc func rewardedAdLoader(_ adLoader: YandexMobileAds.RewardedAdLoader, didFailToLoadWithError error: YandexMobileAds.AdRequestError)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAVideoController) @objcMembers public class VideoController : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.VideoDelegate)? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc deinit
}
@objc(YMAVideoDelegate) public protocol VideoDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func videoControllerDidFinishPlayingVideo(_ videoController: YandexMobileAds.VideoController)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAdRequest) @objcMembers public class AdRequest : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var age: Foundation.NSNumber? {
    @objc get
  }
  @objc public var contextQuery: Swift.String? {
    @objc get
  }
  @objc public var contextTags: [Swift.String]? {
    @objc get
  }
  @objc public var gender: Swift.String? {
    @objc get
  }
  @objc public var location: CoreLocation.CLLocation? {
    @objc get
  }
  @objc public var adTheme: YandexMobileAds.AdTheme {
    @objc get
  }
  @objc public var biddingData: Swift.String? {
    @objc get
  }
  @objc public var headerBiddingData: Swift.String? {
    @objc get
  }
  @objc public var parameters: [Swift.String : Swift.String]? {
    @objc get
  }
  @objc public var mutableRequest: YandexMobileAds.MutableAdRequest {
    @objc get
  }
  @objc override convenience dynamic public init()
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableRequest` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAdRequestConfiguration) @objcMembers public class AdRequestConfiguration : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var adUnitID: Swift.String {
    @objc get
  }
  @objc public var age: Foundation.NSNumber? {
    @objc get
  }
  @objc public var contextQuery: Swift.String? {
    @objc get
  }
  @objc public var contextTags: [Swift.String]? {
    @objc get
  }
  @objc public var gender: Swift.String? {
    @objc get
  }
  @objc public var location: CoreLocation.CLLocation? {
    @objc get
  }
  @objc public var adTheme: YandexMobileAds.AdTheme {
    @objc get
  }
  @objc public var biddingData: Swift.String? {
    @objc get
  }
  @objc public var parameters: [Swift.String : Swift.String]? {
    @objc get
  }
  @objc public var mutableConfiguration: YandexMobileAds.MutableAdRequestConfiguration {
    @objc get
  }
  @objc(initWithAdUnitID:) convenience public init(adUnitID: Swift.String)
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableConfiguration` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(YMAImpressionData) public protocol ImpressionData : Foundation.NSCoding, ObjectiveC.NSObjectProtocol {
  @objc var rawData: Swift.String { get }
}
@_hasMissingDesignatedInitializers @objc(YMAMutableAdRequest) @objcMembers public class MutableAdRequest : YandexMobileAds.AdRequest {
  @objc override public var age: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc override public var contextQuery: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var contextTags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc override public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var location: CoreLocation.CLLocation? {
    @objc get
    @objc set
  }
  @objc override public var adTheme: YandexMobileAds.AdTheme {
    @objc get
    @objc set
  }
  @objc override public var biddingData: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var headerBiddingData: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var parameters: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var request: YandexMobileAds.AdRequest {
    @objc get
  }
  @objc convenience dynamic public init()
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `request` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableAdRequestConfiguration) @objcMembers public class MutableAdRequestConfiguration : YandexMobileAds.AdRequestConfiguration {
  @objc override public var age: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc override public var contextQuery: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var contextTags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc override public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var location: CoreLocation.CLLocation? {
    @objc get
    @objc set
  }
  @objc override public var adTheme: YandexMobileAds.AdTheme {
    @objc get
    @objc set
  }
  @objc override public var biddingData: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var parameters: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var request: YandexMobileAds.AdRequestConfiguration {
    @objc get
  }
  @objc convenience public init(adUnitID: Swift.String)
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `request` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(YMAAdTheme) public enum AdTheme : Swift.Int {
  case unspecified
  case light
  case dark
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(YMAAdType) public enum AdType : Swift.Int {
  case banner
  case interstitial
  case rewarded
  case native
  case appOpenAd
  public var underlying: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAAudioSessionManager) @objcMembers public class AudioSessionManager : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.AudioSessionManagerDelegate)? {
    @objc get
    @objc set
  }
  @objc public var isAutomaticallyManaged: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(YMAAudioSessionManagerDelegate) public protocol AudioSessionManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func audioSessionManagerWillPlayAudio(_ audioSessionManager: YandexMobileAds.AudioSessionManager)
  @objc func audioSessionManagerDidStopPlayingAudio(_ audioSessionManager: YandexMobileAds.AudioSessionManager)
}
public typealias YMABidderTokenLoaderCompletion = (Swift.String?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMABidderTokenLoader) @objcMembers public class BidderTokenLoader : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func loadBidderToken(requestConfiguration: YandexMobileAds.BidderTokenRequestConfiguration, completionHandler: @escaping YandexMobileAds.YMABidderTokenLoaderCompletion)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMABidderTokenRequestConfiguration) @objcMembers public class BidderTokenRequestConfiguration : ObjectiveC.NSObject {
  @objc public var adType: YandexMobileAds.AdType {
    @objc get
  }
  @objc public var bannerAdSize: YandexMobileAds.BannerAdSize? {
    @objc get
    @objc set
  }
  @objc public var parameters: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc convenience public init(adType: YandexMobileAds.AdType)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMADeviceType) @objcMembers public class DeviceType : ObjectiveC.NSObject, Swift.OptionSet {
  @objc public var rawValue: Swift.UInt {
    @objc get
  }
  @objc override required convenience dynamic public init()
  @objc required convenience public init(rawValue: Swift.UInt)
  @objc public static let none: YandexMobileAds.DeviceType
  @objc public static let hardware: YandexMobileAds.DeviceType
  @objc public static let simulator: YandexMobileAds.DeviceType
  public typealias ArrayLiteralElement = YandexMobileAds.DeviceType
  public typealias Element = YandexMobileAds.DeviceType
  public typealias RawValue = Swift.UInt
  @objc deinit
}
@objc(YMAAdErrorCode) public enum AdErrorCode : Swift.Int {
  case emptyAdUnitID
  case invalidUUID
  case noSuchAdUnitID
  case noFill
  case badServerResponse
  case adSizeMismatch
  case adTypeMismatch
  case serviceTemporarilyNotAvailable
  case adHasAlreadyBeenPresented
  case nilPresentingViewController
  case incorrectFullscreenView
  case invalidSDKConfiguration
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSError {
  @objc dynamic public var isYandexMobileAdsError: Swift.Bool {
    @objc get
  }
}
extension Swift.Error {
  public var isYandexMobileAdsError: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAMobileAds) @objcMembers public class MobileAds : ObjectiveC.NSObject {
  @objc public static func enableLogging()
  @objc public static func sdkVersion() -> Swift.String
  @objc public static func audioSessionManager() -> YandexMobileAds.AudioSessionManager
  @objc public static func setLocationTrackingEnabled(_ enabled: Swift.Bool)
  @objc(enableVisibilityErrorIndicatorForDeviceType:) public static func enableVisibilityErrorIndicator(for deviceType: YandexMobileAds.DeviceType)
  @objc public static func setUserConsent(_ consent: Swift.Bool)
  @objc public static func initializeSDK(completionHandler: (() -> Swift.Void)? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAVersion) @objcMembers public class Version : ObjectiveC.NSObject {
  @objc(currentVersion) public static let current: YandexMobileAds.Version
  @objc final public let major: Swift.Int
  @objc final public let minor: Swift.Int
  @objc final public let patch: Swift.Int
  @objc final public let prereleaseIdentifiers: [Swift.String]
  @objc final public let buildMetadataIdentifiers: [Swift.String]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAButtonAppearance) @objcMembers public class ButtonAppearance : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var textAppearance: YandexMobileAds.LabelAppearance {
    @objc get
  }
  @objc public var highlightedTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public var normalColor: UIKit.UIColor {
    @objc get
  }
  @objc public var highlightedColor: UIKit.UIColor {
    @objc get
  }
  @objc public var borderColor: UIKit.UIColor {
    @objc get
  }
  @objc public var borderWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var mutableAppearance: YandexMobileAds.MutableButtonAppearance {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc required convenience public init(textAppearance: YandexMobileAds.LabelAppearance, normalColor: UIKit.UIColor, highlightedColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  @objc required convenience public init(textAppearance: YandexMobileAds.LabelAppearance, highlightedTextColor: UIKit.UIColor, normalColor: UIKit.UIColor, highlightedColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  @objc public static func appearanceWithTextAppearance(_ textAppearance: YandexMobileAds.LabelAppearance, normalColor: UIKit.UIColor, highlightedColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat) -> Self
  @objc public static func appearanceWithTextAppearance(_ textAppearance: YandexMobileAds.LabelAppearance, highlightedTextColor: UIKit.UIColor, normalColor: UIKit.UIColor, highlightedColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat) -> Self
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableAppearance` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMAImageAppearance) @objcMembers public class ImageAppearance : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var widthConstraint: YandexMobileAds.SizeConstraint {
    @objc get
  }
  @objc public var mutableAppearance: YandexMobileAds.MutableImageAppearance {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc required convenience public init(widthConstraint: YandexMobileAds.SizeConstraint)
  @objc public static func appearanceWithWidthConstraint(_ widthConstraint: YandexMobileAds.SizeConstraint) -> Self
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableAppearance` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMALabelAppearance) @objcMembers public class LabelAppearance : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var font: UIKit.UIFont {
    @objc get
  }
  @objc public var textColor: UIKit.UIColor {
    @objc get
  }
  @objc public var mutableAppearance: YandexMobileAds.MutableLabelAppearance {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc required convenience public init(font: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc public static func appearanceWithFont(_ font: UIKit.UIFont, textColor: UIKit.UIColor) -> Self
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableAppearance` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableButtonAppearance) @objcMembers public class MutableButtonAppearance : YandexMobileAds.ButtonAppearance {
  @objc override public var textAppearance: YandexMobileAds.LabelAppearance {
    @objc get
    @objc set
  }
  @objc override public var highlightedTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var normalColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var highlightedColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var buttonAppearance: YandexMobileAds.ButtonAppearance {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc required convenience public init(textAppearance: YandexMobileAds.LabelAppearance, normalColor: UIKit.UIColor, highlightedColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  @objc required convenience public init(textAppearance: YandexMobileAds.LabelAppearance, highlightedTextColor: UIKit.UIColor, normalColor: UIKit.UIColor, highlightedColor: UIKit.UIColor, borderColor: UIKit.UIColor, borderWidth: CoreFoundation.CGFloat)
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `buttonAppearance` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableImageAppearance) @objcMembers public class MutableImageAppearance : YandexMobileAds.ImageAppearance {
  @objc override public var widthConstraint: YandexMobileAds.SizeConstraint {
    @objc get
    @objc set
  }
  @objc public var imageAppearance: YandexMobileAds.ImageAppearance {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc required convenience public init(widthConstraint: YandexMobileAds.SizeConstraint)
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `imageAppearance` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableLabelAppearance) @objcMembers public class MutableLabelAppearance : YandexMobileAds.LabelAppearance {
  @objc override public var font: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc override public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var labelAppearance: YandexMobileAds.LabelAppearance {
    @objc get
  }
  @objc required convenience public init(font: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc convenience dynamic public init()
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `labelAppearance` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableRatingAppearance) @objcMembers public class MutableRatingAppearance : YandexMobileAds.RatingAppearance {
  @objc override public var emptyStarColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var filledStarColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var preferredStarSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var ratingAppearance: YandexMobileAds.RatingAppearance {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc required convenience public init(emptyStarColor: UIKit.UIColor, filledStarColor: UIKit.UIColor, starSize: CoreFoundation.CGFloat)
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `ratingAppearance` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableSizeConstraint) @objcMembers public class MutableSizeConstraint : YandexMobileAds.SizeConstraint {
  @objc override public var type: YandexMobileAds.SizeConstraintType {
    @objc get
    @objc set
  }
  @objc override public var value: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var constraint: YandexMobileAds.SizeConstraint {
    @objc get
  }
  @objc convenience dynamic public init()
  @objc required convenience public init(type: YandexMobileAds.SizeConstraintType, value: CoreFoundation.CGFloat)
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `constraint` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMARatingAppearance) @objcMembers public class RatingAppearance : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var emptyStarColor: UIKit.UIColor {
    @objc get
  }
  @objc public var filledStarColor: UIKit.UIColor {
    @objc get
  }
  @objc public var preferredStarSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var mutableAppearance: YandexMobileAds.MutableRatingAppearance {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc required convenience public init(emptyStarColor: UIKit.UIColor, filledStarColor: UIKit.UIColor, starSize: CoreFoundation.CGFloat)
  @objc public static func appearanceWithEmptyStarColor(_ emptyStarColor: UIKit.UIColor, filledStarColor: UIKit.UIColor, starSize: CoreFoundation.CGFloat) -> Self
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableAppearance` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMASizeConstraint) @objcMembers public class SizeConstraint : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var type: YandexMobileAds.SizeConstraintType {
    @objc get
  }
  @objc public var value: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var mutableConstraint: YandexMobileAds.MutableSizeConstraint {
    @objc get
  }
  @objc override convenience dynamic public init()
  @objc required convenience public init(type: YandexMobileAds.SizeConstraintType, value: CoreFoundation.CGFloat)
  @objc public static func constraintWithType(_ type: YandexMobileAds.SizeConstraintType, value: CoreFoundation.CGFloat) -> Self
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableConstraint` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(YMASizeConstraintType) public enum SizeConstraintType : Swift.Int {
  case fixed
  case fixedBannerRatio
  case preferredBannerRatio
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(YMAMutableNativeAdRequestConfiguration) @objcMembers public class MutableNativeAdRequestConfiguration : YandexMobileAds.NativeAdRequestConfiguration {
  @objc override public var age: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc override public var contextQuery: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var contextTags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc override public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var location: CoreLocation.CLLocation? {
    @objc get
    @objc set
  }
  @objc override public var adTheme: YandexMobileAds.AdTheme {
    @objc get
    @objc set
  }
  @objc override public var biddingData: Swift.String? {
    @objc get
    @objc set
  }
  @objc override public var parameters: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc override public var shouldLoadImagesAutomatically: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var request: YandexMobileAds.NativeAdRequestConfiguration {
    @objc get
  }
  @objc convenience public init(adUnitID: Swift.String)
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `request` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(YMAMutableNativeTemplateAppearance) @objcMembers public class MutableNativeTemplateAppearance : YandexMobileAds.NativeTemplateAppearance {
  @objc override public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc override public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc override public var contentPadding: YandexMobileAds.YMAHorizontalOffset {
    @objc get
    @objc set
  }
  @objc override public var imageMargins: YandexMobileAds.YMAHorizontalOffset {
    @objc get
    @objc set
  }
  @objc override public var ageAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc override public var bodyAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc override public var callToActionAppearance: YandexMobileAds.ButtonAppearance? {
    @objc get
    @objc set
  }
  @objc override public var domainAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc override public var faviconAppearance: YandexMobileAds.ImageAppearance? {
    @objc get
    @objc set
  }
  @objc override public var feedbackAppearance: YandexMobileAds.ImageAppearance? {
    @objc get
    @objc set
  }
  @objc override public var imageAppearance: YandexMobileAds.ImageAppearance? {
    @objc get
    @objc set
  }
  @objc override public var ratingAppearance: YandexMobileAds.RatingAppearance? {
    @objc get
    @objc set
  }
  @objc override public var sponsoredAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc override public var titleAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc override public var reviewCountAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc override public var warningAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
    @objc set
  }
  @objc public var appearance: YandexMobileAds.NativeTemplateAppearance {
    @objc get
  }
  @objc convenience dynamic public init()
  @available(*, deprecated, message: "copy(with:) is deprecated. Use `appearance` property instead.")
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(YMANativeAd) public protocol NativeAd : ObjectiveC.NSObjectProtocol {
  @objc var adType: YandexMobileAds.NativeAdType { get }
  @objc var delegate: (any YandexMobileAds.NativeAdDelegate)? { get set }
  @objc var info: Swift.String? { get }
  @objc var ads: [any YandexMobileAds.NativeAd] { get }
  @objc func adAssets() -> YandexMobileAds.NativeAdAssets
  @objc func loadImages()
  @objc(addImageLoadingObserver:) func add(_ observer: any YandexMobileAds.NativeAdImageLoadingObserver)
  @objc(removeImageLoadingObserver:) func remove(_ observer: any YandexMobileAds.NativeAdImageLoadingObserver)
  @objc(bindWithAdView:error:) func bind(with adView: YandexMobileAds.YMANativeAdView) throws
  @objc func bindAd(toSliderView sliderView: YandexMobileAds.YMANativeAdView) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeAdAssets) @objcMembers public class NativeAdAssets : ObjectiveC.NSObject {
  @objc public var age: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var body: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var callToAction: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var domain: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var favicon: YandexMobileAds.NativeAdImage? {
    @objc get
    @objc set
  }
  @objc public var feedbackAvailable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var icon: YandexMobileAds.NativeAdImage? {
    @objc get
    @objc set
  }
  @objc public var image: YandexMobileAds.NativeAdImage? {
    @objc get
    @objc set
  }
  @objc public var media: YandexMobileAds.NativeAdMedia? {
    @objc get
    @objc set
  }
  @objc public var price: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var rating: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var reviewCount: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var sponsored: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var warning: Swift.String? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc deinit
}
@objc(YMANativeAdDelegate) public protocol NativeAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func viewControllerForPresentingModalView() -> UIKit.UIViewController?
  @objc optional func nativeAdDidClick(_ ad: any YandexMobileAds.NativeAd)
  @objc optional func nativeAdWillLeaveApplication(_ ad: any YandexMobileAds.NativeAd)
  @objc optional func nativeAd(_ ad: any YandexMobileAds.NativeAd, willPresentScreen viewController: UIKit.UIViewController?)
  @objc optional func nativeAd(_ ad: any YandexMobileAds.NativeAd, didDismissScreen viewController: UIKit.UIViewController?)
  @objc(nativeAd:didTrackImpressionWithData:) optional func nativeAd(_ ad: any YandexMobileAds.NativeAd, didTrackImpressionWith impressionData: (any YandexMobileAds.ImpressionData)?)
  @objc(closeNativeAd:) optional func close(_ ad: any YandexMobileAds.NativeAd)
}
@objc(YMANativeErrorCode) public enum NativeErrorCode : Swift.Int {
  case noViewForAsset
  case invalidViewForBinding
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSError {
  @objc dynamic public var isYandexMobileNativeAdsError: Swift.Bool {
    @objc get
  }
}
extension Swift.Error {
  public var isYandexMobileNativeAdsError: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeAdImage) @objcMembers public class NativeAdImage : ObjectiveC.NSObject {
  @objc public var size: CoreFoundation.CGSize {
    @objc get
  }
  @objc public var imageValue: UIKit.UIImage? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(YMANativeAdImageLoadingObserver) public protocol NativeAdImageLoadingObserver : ObjectiveC.NSObjectProtocol {
  @objc func nativeAdDidFinishLoadingImages(_ ad: any YandexMobileAds.NativeAd)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeAdLoader) @objcMembers public class NativeAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.NativeAdLoaderDelegate)? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc(loadAdWithRequestConfiguration:) public func loadAd(with requestConfiguration: YandexMobileAds.NativeAdRequestConfiguration)
  @objc deinit
}
@objc(YMANativeAdLoaderDelegate) public protocol NativeAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc(nativeAdLoader:didLoadAd:) func nativeAdLoader(_ loader: YandexMobileAds.NativeAdLoader, didLoad ad: any YandexMobileAds.NativeAd)
  @objc(nativeAdLoader:didFailLoadingWithError:) func nativeAdLoader(_ loader: YandexMobileAds.NativeAdLoader, didFailLoadingWithError error: any Swift.Error)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeAdMedia) public class NativeAdMedia : ObjectiveC.NSObject {
  @objc public var aspectRatio: CoreFoundation.CGFloat {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeAdRequestConfiguration) @objcMembers public class NativeAdRequestConfiguration : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var adUnitID: Swift.String {
    @objc get
  }
  @objc public var age: Foundation.NSNumber? {
    @objc get
  }
  @objc public var contextQuery: Swift.String? {
    @objc get
  }
  @objc public var contextTags: [Swift.String]? {
    @objc get
  }
  @objc public var gender: Swift.String? {
    @objc get
  }
  @objc public var location: CoreLocation.CLLocation? {
    @objc get
  }
  @objc public var adTheme: YandexMobileAds.AdTheme {
    @objc get
  }
  @objc public var biddingData: Swift.String? {
    @objc get
  }
  @objc public var parameters: [Swift.String : Swift.String]? {
    @objc get
  }
  @objc public var shouldLoadImagesAutomatically: Swift.Bool {
    @objc get
  }
  @objc public var mutableConfiguration: YandexMobileAds.MutableNativeAdRequestConfiguration {
    @objc get
  }
  @objc(initWithAdUnitID:) convenience public init(adUnitID: Swift.String)
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableConfiguration` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(YMANativeAdType) public enum NativeAdType : Swift.Int {
  case content
  case appInstall
  case media
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeAdVideoController) @objcMembers public class NativeAdVideoController : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func pause()
  @objc public func resume()
  @objc deinit
}
@objc(YMANativeAdVideoControllerProvider) public protocol NativeAdVideoControllerProvider : ObjectiveC.NSObjectProtocol {
  @objc var videoController: YandexMobileAds.NativeAdVideoController? { get }
}
@_inheritsConvenienceInitializers @objc(YMANativeBannerView) @objcMembers @_Concurrency.MainActor(unsafe) public class NativeBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var ad: (any YandexMobileAds.NativeAd)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc(applyAppearance:) @_Concurrency.MainActor(unsafe) public func apply(_ appearance: YandexMobileAds.NativeTemplateAppearance)
  @objc(heightWithAd:width:appearance:) @_Concurrency.MainActor(unsafe) public static func height(with ad: any YandexMobileAds.NativeAd, width: CoreFoundation.CGFloat, appearance: YandexMobileAds.NativeTemplateAppearance?) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeBulkAdLoader) @objcMembers public class NativeBulkAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: (any YandexMobileAds.NativeBulkAdLoaderDelegate)? {
    @objc get
    @objc set
  }
  @objc override convenience dynamic public init()
  @objc(loadAdsWithRequestConfiguration:adsCount:) public func loadAds(with requestConfiguration: YandexMobileAds.NativeAdRequestConfiguration, adsCount: Swift.Int)
  @objc deinit
}
@objc(YMANativeBulkAdLoaderDelegate) public protocol NativeBulkAdLoaderDelegate : ObjectiveC.NSObjectProtocol {
  @objc(nativeBulkAdLoader:didLoadAds:) func nativeBulkAdLoader(_ nativeBulkAdLoader: YandexMobileAds.NativeBulkAdLoader, didLoad ads: [any YandexMobileAds.NativeAd])
  @objc(nativeBulkAdLoader:didFailLoadingWithError:) func nativeBulkAdLoader(_ nativeBulkAdLoader: YandexMobileAds.NativeBulkAdLoader, didFailLoadingWithError error: any Swift.Error)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeTemplateAppearance) @objcMembers public class NativeTemplateAppearance : ObjectiveC.NSObject, Foundation.NSCopying, Foundation.NSMutableCopying {
  @objc public var borderWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public var borderColor: UIKit.UIColor {
    @objc get
  }
  @objc public var backgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc public var contentPadding: YandexMobileAds.YMAHorizontalOffset {
    @objc get
  }
  @objc public var imageMargins: YandexMobileAds.YMAHorizontalOffset {
    @objc get
  }
  @objc public var ageAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var bodyAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var callToActionAppearance: YandexMobileAds.ButtonAppearance? {
    @objc get
  }
  @objc public var domainAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var faviconAppearance: YandexMobileAds.ImageAppearance? {
    @objc get
  }
  @objc public var feedbackAppearance: YandexMobileAds.ImageAppearance? {
    @objc get
  }
  @objc public var imageAppearance: YandexMobileAds.ImageAppearance? {
    @objc get
  }
  @objc public var ratingAppearance: YandexMobileAds.RatingAppearance? {
    @objc get
  }
  @objc public var sponsoredAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var titleAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var reviewCountAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var warningAppearance: YandexMobileAds.LabelAppearance? {
    @objc get
  }
  @objc public var mutableAppearance: YandexMobileAds.MutableNativeTemplateAppearance {
    @objc get
  }
  @objc(defaultAppearance) public static let `default`: YandexMobileAds.NativeTemplateAppearance
  @objc override convenience dynamic public init()
  @available(*, deprecated, message: "copy(with:) is deprecated. Will be removed in future versions.")
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @available(*, deprecated, message: "mutableCopy(with:) is deprecated. Use `mutableAppearance` property instead.")
  @objc public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc(YMANativeVideoControlsCustomizable) public protocol NativeVideoControlsCustomizable : ObjectiveC.NSObjectProtocol {
  @objc func setVideoPlaybackControls(_ videoPlaybackControls: YandexMobileAds.NativeVideoPlaybackControls)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(YMANativeVideoPlaybackControls) public class NativeVideoPlaybackControls : ObjectiveC.NSObject {
  @objc(initWithProgressControl:muteControl:) convenience public init(progressControl: (any UIKit.UIView & YandexMobileAds.NativeVideoPlaybackProgressControl)?, muteControl: (any UIKit.UIView & YandexMobileAds.NativeVideoPlaybackMuteControl)?)
  @objc deinit
}
@objc(YMANativeVideoPlaybackMuteControl) public protocol NativeVideoPlaybackMuteControl : ObjectiveC.NSObjectProtocol {
  @objc var delegate: (any YandexMobileAds.NativeVideoPlaybackMuteControlDelegate)? { get set }
  @objc(configureWithIsMuted:) func configure(withIsMuted isMuted: Swift.Bool)
  @objc(configureWithIsHidden:) func configure(withIsHidden isHidden: Swift.Bool)
}
@objc(YMANativeVideoPlaybackMuteControlDelegate) public protocol NativeVideoPlaybackMuteControlDelegate : ObjectiveC.NSObjectProtocol {
  @objc func muteControl(_ muteControl: any YandexMobileAds.NativeVideoPlaybackMuteControl, didChangeIsMuted isMuted: Swift.Bool)
}
@objc(YMANativeVideoPlaybackProgressControl) public protocol NativeVideoPlaybackProgressControl : ObjectiveC.NSObjectProtocol {
  @objc func configure(withPosition position: Foundation.TimeInterval, duration: Foundation.TimeInterval)
  @objc func reset()
}
@objc(YMARating) public protocol Rating : ObjectiveC.NSObjectProtocol {
  @objc func setRating(_ rating: Foundation.NSNumber?)
  @objc func rating() -> Foundation.NSNumber?
}
extension YandexMobileAds.AdTheme : Swift.Equatable {}
extension YandexMobileAds.AdTheme : Swift.Hashable {}
extension YandexMobileAds.AdTheme : Swift.RawRepresentable {}
extension YandexMobileAds.AdType : Swift.Equatable {}
extension YandexMobileAds.AdType : Swift.Hashable {}
extension YandexMobileAds.AdType : Swift.RawRepresentable {}
extension YandexMobileAds.AdErrorCode : Swift.Equatable {}
extension YandexMobileAds.AdErrorCode : Swift.Hashable {}
extension YandexMobileAds.AdErrorCode : Swift.RawRepresentable {}
extension YandexMobileAds.SizeConstraintType : Swift.Equatable {}
extension YandexMobileAds.SizeConstraintType : Swift.Hashable {}
extension YandexMobileAds.SizeConstraintType : Swift.RawRepresentable {}
extension YandexMobileAds.NativeErrorCode : Swift.Equatable {}
extension YandexMobileAds.NativeErrorCode : Swift.Hashable {}
extension YandexMobileAds.NativeErrorCode : Swift.RawRepresentable {}
extension YandexMobileAds.NativeAdType : Swift.Equatable {}
extension YandexMobileAds.NativeAdType : Swift.Hashable {}
extension YandexMobileAds.NativeAdType : Swift.RawRepresentable {}
