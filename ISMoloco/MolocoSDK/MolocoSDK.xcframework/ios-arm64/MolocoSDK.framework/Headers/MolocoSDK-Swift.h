#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef MOLOCOSDK_SWIFT_H
#define MOLOCOSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MolocoSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



typedef SWIFT_ENUM(NSInteger, AdNativeType, open) {
  AdNativeTypeUnknownType = 0,
  AdNativeTypeLogo = 1,
  AdNativeTypeImage = 2,
  AdNativeTypeVideo = 3,
};

@protocol MolocoAd;

/// Base  delegate protocol. Common events for every ad object
SWIFT_PROTOCOL("_TtP9MolocoSDK14BaseAdDelegate_")
@protocol BaseAdDelegate
/// SDK calls this method when ad was successfully loaded
/// \param ad ad object that was loaded
///
- (void)didLoadWithAd:(id <MolocoAd> _Nonnull)ad;
/// SDK calls this method when ad was not loaded for some reasons
/// \param ad ad object that was loaded
///
/// \param error the reason of failing loading
///
- (void)failToLoadWithAd:(id <MolocoAd> _Nonnull)ad with:(NSError * _Nullable)error;
/// SDK calls this method when ad was shown on screen
/// \param ad ad object that was shown
///
- (void)didShowWithAd:(id <MolocoAd> _Nonnull)ad;
/// SDK calls this method when ad fails to show for some reasons
/// \param ad ad object that was not shown
///
/// \param error the reason of failing loading
///
- (void)failToShowWithAd:(id <MolocoAd> _Nonnull)ad with:(NSError * _Nullable)error;
/// SDK calls this method when ad was closed
/// \param ad ad object that was closed
///
- (void)didHideWithAd:(id <MolocoAd> _Nonnull)ad;
/// SDK calls this method when user clicked on the ad
/// \param ad ad object that was clicked
///
- (void)didClickOn:(id <MolocoAd> _Nonnull)ad;
@end




/// If you need to release resources implement this protocol and implement <code>destroy</code> function.
SWIFT_PROTOCOL("_TtP9MolocoSDK11Destroyable_")
@protocol Destroyable
- (void)destroy;
@end

@class MolocoInitState;
@class NSString;

/// <code>Moloco</code> class is the entry point to use Moloco SDK.
/// Use it to initialise SDK and create <code>ad</code> objects.
SWIFT_CLASS("_TtC9MolocoSDK6Moloco")
@interface Moloco : NSObject
/// Gets a shared instance of Moloco SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Moloco * _Nonnull shared;)
+ (Moloco * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns SDK state. You can check if SDK is initialized or <code>MediationInfo</code>.
@property (nonatomic, readonly, strong) MolocoInitState * _Nonnull state;
/// Returns Moloco SDK version.
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Get BidToken
/// \param completion Callback to get BidToken
///
- (void)getBidTokenWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
@end

@class MolocoInitParams;

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface Moloco (SWIFT_EXTENSION(MolocoSDK))
/// Initializes Moloco SDK
/// \param initParams Pass initialization params
///
/// \param completion this block is called when SDK initialization completes.
///
- (void)initializeWithInitParams:(MolocoInitParams * _Nonnull)initParams completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=13.0);
@end

@class UIViewController;
@protocol MolocoBannerDelegate;
@class MolocoBannerAdView;
@protocol MolocoInterstitialDelegate;
@protocol MolocoInterstitial;
@protocol MolocoRewardedDelegate;
@protocol MolocoRewardedInterstitial;
@protocol MolocoNativeAdDelegate;
@protocol MolocoNativeAd;

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface Moloco (SWIFT_EXTENSION(MolocoSDK))
/// Creates an MREC banner with dimensions 300x250.
/// \param adUnit ad unit id from Moloco dashboard
///
/// \param viewController view controller where the banner will be placed
///
/// \param delegate set delegate to listen to ad events
///
///
/// returns:
/// returns <code>MolocoBannerAdView</code>ad  object with configured as MREC.
- (MolocoBannerAdView * _Nullable)createMRECFor:(NSString * _Nonnull)adUnit viewController:(UIViewController * _Nonnull)viewController delegate:(id <MolocoBannerDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Creates a fullscreen interstitial ad.
/// \param adUnit ad unit id from Moloco dashboard
///
/// \param delegate set delegate to listen to ad events
///
///
/// returns:
/// returns <code>MolocoInterstitial</code> skippable fullscreen ad object
- (id <MolocoInterstitial> _Nullable)createInterstitialFor:(NSString * _Nonnull)adUnit delegate:(id <MolocoInterstitialDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Creates a fullscreen rewarded ad.
/// \param adUnit ad unit id from Moloco dashboard
///
/// \param delegate set delegate to listen to ad events
///
///
/// returns:
/// returns <code>MolocoRewardedInterstitial</code> not skippable fullscreen ad object
- (id <MolocoRewardedInterstitial> _Nullable)createRewardedFor:(NSString * _Nonnull)adUnit delegate:(id <MolocoRewardedDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Creates a banner with dimensions 300x250.
/// \param adUnit ad unit id from Moloco dashboard
///
/// \param viewController view controller where the banner will be placed
///
/// \param delegate set delegate to listen to ad events
///
///
/// returns:
/// returns <code>MolocoBannerAdView</code>ad  object with configured as default banner.
- (MolocoBannerAdView * _Nullable)createBannerFor:(NSString * _Nonnull)adUnit viewController:(UIViewController * _Nonnull)viewController delegate:(id <MolocoBannerDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// Creates a native ad
/// \param adUnit ad unit id from Moloco dashboard
///
/// \param delegate set delegate to listen to ad events
///
///
/// returns:
/// returns <code>MolocoNativeAd</code>ad  object with configured as native ad.
- (id <MolocoNativeAd> _Nullable)createNativeAdFor:(NSString * _Nonnull)adUnit delegate:(id <MolocoNativeAdDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
@end


/// Check whether ad is ready to be shown.
SWIFT_PROTOCOL("_TtP9MolocoSDK9Readiable_")
@protocol Readiable
@property (nonatomic, readonly) BOOL isReady;
@end


/// Common protocol to every ad object.
SWIFT_PROTOCOL("_TtP9MolocoSDK8MolocoAd_")
@protocol MolocoAd <Destroyable, Readiable>
/// Call this method to start loading ad assets.
/// You will get notification in delegate object if ad was loaded successfully or failed to load,
/// \param bidResponse put bid response json string to load ad
///
- (void)loadWithBidResponse:(NSString * _Nonnull)bidResponse;
@end

@class NSCoder;

/// Ad object that inherit <code>UIView</code>. Put it as subview and call <code>load</code> method to display banner ad.
SWIFT_CLASS("_TtC9MolocoSDK18MolocoBannerAdView") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface MolocoBannerAdView : UIView <MolocoAd>
/// Set the delegate to be notified when your ad is ready, and to receive notifications of other ad-related events.
@property (nonatomic, weak) id <MolocoBannerDelegate> _Nullable delegate;
/// Whether banner ad is ready to display.
@property (nonatomic, readonly) BOOL isReady;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Load a banner ad or refresh the existing ad for the current view.
/// \param bidResponse json string of bid that response needs to be loaded and displayed.
///
- (void)loadWithBidResponse:(NSString * _Nonnull)bidResponse;
/// Call this method to release all ad resources
- (void)destroy;
/// This is invoked when the view is added to subview. Do <em>not</em> call it manually!
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// Banner delegate protocol: Implement this to get notified about banner ad events.
SWIFT_PROTOCOL("_TtP9MolocoSDK20MolocoBannerDelegate_")
@protocol MolocoBannerDelegate <BaseAdDelegate>
@end

/// Enum describes all banner formats.
typedef SWIFT_ENUM(NSInteger, MolocoBannerType, open) {
/// regular banner
  MolocoBannerTypeRegular = 0,
/// MREC banner
  MolocoBannerTypeMrec = 1,
};

typedef SWIFT_ENUM(NSInteger, MolocoError, open) {
/// Generic failure error code
  MolocoErrorUnknown = -1,
/// SDK fails to initialize for unknown reason
  MolocoErrorSdkInit = 100,
/// SDK failed to initialize because it could not parse configuration response
  MolocoErrorSdkInvalidConfiguration = 1002,
/// ad fails to load for unknown reason
  MolocoErrorAdLoadFailed = 2000,
/// ad fails to load because SDK is not initialized
  MolocoErrorAdLoadFailedSDKNotInit = 2001,
/// ad fails to load because of assets load timeout
  MolocoErrorAdLoadTimeoutError = 2003,
/// ad fails to show for unknown reasons
  MolocoErrorAdShowFailed = 300,
/// ad fails to load because ad was not loaded
  MolocoErrorAdShowFailedNotLoaded = 3001,
/// ad fails to show because ad is already displaying
  MolocoErrorAdShowFailedAlreadyDisplaying = 3002,
/// the bid response received can not be parsed by SDK
  MolocoErrorAdBidParseFailed = 4000,
/// the bid token couldn’t be retrieved
  MolocoErrorAdSignalCollectionFailed = 5000,
};
static NSString * _Nonnull const MolocoErrorDomain = @"MolocoSDK.MolocoError";


/// Common protocol to every fullscreen ad.
SWIFT_PROTOCOL("_TtP9MolocoSDK18MolocoFullscreenAd_")
@protocol MolocoFullscreenAd <MolocoAd>
/// Start showing ad after it was successfully loaded
/// \param viewController view controller that presents the ad
///
- (void)showFrom:(UIViewController * _Nonnull)viewController;
/// Start showing ad after it was successfully loaded
/// \param viewController view controller that presents the ad
///
/// \param muted mute video on start
///
- (void)showFrom:(UIViewController * _Nonnull)viewController muted:(BOOL)muted;
/// Fullscreen view controller
/// note:
/// This property is used to present fullscreen ads in SwiftUI
///
/// returns:
/// Fullscreen ad view controller
@property (nonatomic, readonly, strong) UIViewController * _Nullable fullscreenViewController;
@end

typedef SWIFT_ENUM(NSInteger, MolocoFullscreenAdType, open) {
  MolocoFullscreenAdTypeInterstitial = 1,
  MolocoFullscreenAdTypeRewarded = 2,
};

enum MolocoMediationInfo : NSInteger;

/// Use this object to init Moloco SDK
SWIFT_CLASS("_TtC9MolocoSDK16MolocoInitParams")
@interface MolocoInitParams : NSObject
/// Initializer for <code>MolocoInitParams</code> object.
/// \param appKey Use appKey from Moloco dashboard
///
/// \param mediator In case of mediation integration set necessary value
///
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey mediator:(enum MolocoMediationInfo)mediator OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SDK  init state
SWIFT_CLASS("_TtC9MolocoSDK15MolocoInitState")
@interface MolocoInitState : NSObject
/// Returns if SDK already initialized or not.
@property (nonatomic, readonly) BOOL isInitialized;
/// Returns <code>MediationiInfo</code> value
@property (nonatomic, readonly) enum MolocoMediationInfo mediationInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Fullscreen interstitial ad protocol.
SWIFT_PROTOCOL("_TtP9MolocoSDK18MolocoInterstitial_")
@protocol MolocoInterstitial <MolocoFullscreenAd>
/// Set delegate to be notified of when your ad is ready and of other ad-related events.
@property (nonatomic, strong) id <MolocoInterstitialDelegate> _Nullable interstitialDelegate;
@end


/// Rewarded interstitial delegate protocol. Implement it to get notified interstitial ad events.
SWIFT_PROTOCOL("_TtP9MolocoSDK26MolocoInterstitialDelegate_")
@protocol MolocoInterstitialDelegate <BaseAdDelegate>
@end

/// In case of mediation integration pass necessary value in <code>MolocoInitParams</code> object
typedef SWIFT_ENUM(NSInteger, MolocoMediationInfo, open) {
/// AppLovin MAX mediator
  MolocoMediationInfoMax = 0,
/// X3Mads  mediator
  MolocoMediationInfoX3mads = 1,
/// LevelPlay (Unity) mediator
  MolocoMediationInfoLevelPlay = 2,
/// Direct integration or custom adapter
  MolocoMediationInfoNone = 3,
};

@protocol MolocoNativeAdAssests;

SWIFT_PROTOCOL("_TtP9MolocoSDK14MolocoNativeAd_")
@protocol MolocoNativeAd <MolocoAd>
@property (nonatomic, readonly, strong) UIView * _Nonnull adView;
@property (nonatomic, strong) id <MolocoNativeAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) id <MolocoNativeAdAssests> _Nullable assets;
@property (nonatomic, readonly) enum AdNativeType type;
- (void)showIn:(UIViewController * _Nonnull)in;
- (void)handleClick;
@end

@class UIImage;

SWIFT_PROTOCOL("_TtP9MolocoSDK21MolocoNativeAdAssests_")
@protocol MolocoNativeAdAssests
@property (nonatomic, readonly, strong) UIImage * _Nullable appIcon;
@property (nonatomic, readonly, strong) UIImage * _Nullable mainImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull sponsorText;
@property (nonatomic, readonly, copy) NSString * _Nonnull ctaTitle;
@property (nonatomic, readonly) double rating;
@property (nonatomic, readonly, strong) UIView * _Nullable videoView;
@end


SWIFT_PROTOCOL("_TtP9MolocoSDK22MolocoNativeAdDelegate_")
@protocol MolocoNativeAdDelegate <BaseAdDelegate>
@end


SWIFT_CLASS("_TtC9MolocoSDK28MolocoNativeAdImplementation") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface MolocoNativeAdImplementation : UIView <MolocoNativeAd>
@property (nonatomic, readonly) BOOL isReady;
@property (nonatomic, readonly, strong) id <MolocoNativeAdAssests> _Nullable assets;
@property (nonatomic, weak) id <MolocoNativeAdDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) UIView * _Nonnull adView;
@property (nonatomic, readonly) enum AdNativeType type;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)loadWithBidResponse:(NSString * _Nonnull)bidResponse;
- (void)showIn:(UIViewController * _Nonnull)viewController;
- (void)destroy;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface MolocoNativeAdImplementation (SWIFT_EXTENSION(MolocoSDK))
- (void)handleClick;
@end



/// Fill this object to respect user privacy consent.
SWIFT_CLASS("_TtC9MolocoSDK21MolocoPrivacySettings")
@interface MolocoPrivacySettings : NSObject
/// Checks if user has set consent for information sharing.
///
/// returns:
/// <code>true</code>if user has consent for information sharing.. <code>false</code> if user has not consented information sharing or the value has not been set.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL hasUserConsent;)
+ (BOOL)hasUserConsent SWIFT_WARN_UNUSED_RESULT;
+ (void)setHasUserConsent:(BOOL)value;
/// Checks if the user is age-restricted.
///
/// returns:
/// <code>true</code>  if the user is age-restricted. <code>false</code>  if the user is not age-restricted or the age-restriction value has not been set.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAgeRestrictedUser;)
+ (BOOL)isAgeRestrictedUser SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAgeRestrictedUser:(BOOL)value;
/// Checks if the user has opted out of the sale of their personal information.
///
/// returns:
/// <code>true</code> if the user opted out of the sale of their personal information. <code>false</code> if the user opted in to the sale of their personal information or the value has not been set .
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isDoNotSell;)
+ (BOOL)isDoNotSell SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsDoNotSell:(BOOL)value;
/// Checks if the user has opted out of the sale of their personal information.
///
/// returns:
/// <code>true</code> if user has set a value of consent for information sharing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isUserConsentSet;)
+ (BOOL)isUserConsentSet SWIFT_WARN_UNUSED_RESULT;
/// Checks if user has set its age restricted settings.
///
/// returns:
/// <code>true</code> if user has set its age restricted settings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isAgeRestrictedUserSet;)
+ (BOOL)isAgeRestrictedUserSet SWIFT_WARN_UNUSED_RESULT;
/// Checks if the user has set the option to sell their personal information.
///
/// returns:
/// <code>true</code> if user has chosen an option to sell their personal information.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isDoNotSellSet;)
+ (BOOL)isDoNotSellSet SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Returns IAB US Privacy string.
///
/// returns:
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull usPrivacyString;)
+ (NSString * _Nonnull)usPrivacyString SWIFT_WARN_UNUSED_RESULT;
@end


/// Rewarded interstitial delegate protocol. Implement it to get notified rewarded ad events.
SWIFT_PROTOCOL("_TtP9MolocoSDK22MolocoRewardedDelegate_")
@protocol MolocoRewardedDelegate <BaseAdDelegate>
/// SDK calls this method when the user gets a reward.
/// \param ad ad object that produce reward
///
- (void)userRewardedWithAd:(id <MolocoAd> _Nonnull)ad;
/// SDK calls this method when video starts.
/// Optional, it can be not invoked.
/// \param ad ad object that starts video.
///
- (void)rewardedVideoStartedWithAd:(id <MolocoAd> _Nonnull)ad;
/// SDK calls this method when the video has completed video playback.
/// Optional, it can be not invoked.
/// \param ad ad object that video reached the end.
///
- (void)rewardedVideoCompletedWithAd:(id <MolocoAd> _Nonnull)ad;
@end


/// Fullscreen rewarded interstitial ad protocol.
SWIFT_PROTOCOL("_TtP9MolocoSDK26MolocoRewardedInterstitial_")
@protocol MolocoRewardedInterstitial <MolocoFullscreenAd>
/// Set delegate to be notified of when your ad is ready and of other ad-related events.
@property (nonatomic, strong) id <MolocoRewardedDelegate> _Nullable rewardedDelegate;
@end













#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
